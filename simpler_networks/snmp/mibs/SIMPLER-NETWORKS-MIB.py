# PySNMP SMI module. Autogenerated from smidump -f python SIMPLER-NETWORKS-MIB
# by libsmi2pysnmp-0.1.3 at Wed Oct 25 18:19:34 2017,
# Python version sys.version_info(major=2, minor=7, micro=12, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( sysUpTime, ) = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
( Bits, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "TimeTicks", "Unsigned32", "enterprises")
( DisplayString, RowStatus, TestAndIncr, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TestAndIncr")

# Objects

sni = ModuleIdentity((1, 3, 6, 1, 4, 1, 4987)).setRevisions(("2015-11-13 16:50",))
if mibBuilder.loadTexts: sni.setOrganization("Simpler Networks Inc.")
if mibBuilder.loadTexts: sni.setContactInfo("Simpler Networks Inc.\n1975 Boul. Hymus, Suite 225\nDorval, Quebec, H9P 1J8\nCanada\ninfo@simplernetworks.com\n1-514-898-2629")
if mibBuilder.loadTexts: sni.setDescription("The management information definitions for the\nSimpler Networks EZ-EDGE product.\nCopyright (C) Simpler Networks Inc. (1999-2016).")
ezedge = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 1))
sniConnTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 1))
if mibBuilder.loadTexts: sniConnTable.setDescription("Simpler Networks Inc table to view / create cross connections.")
sniConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniConnFromEndPointCard"), (0, "SIMPLER-NETWORKS-MIB", "sniConnFromEndPointPort"), (0, "SIMPLER-NETWORKS-MIB", "sniConnToEndPointCard"), (0, "SIMPLER-NETWORKS-MIB", "sniConnToEndPointPort"), (0, "SIMPLER-NETWORKS-MIB", "sniConnToServiceId"))
if mibBuilder.loadTexts: sniConnEntry.setDescription("Simpler Networks Inc table entry to view / create cross connections.")
sniConnFromEndPointCard = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnFromEndPointCard.setDescription("The from end point access card index of this connection.")
sniConnFromEndPointPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnFromEndPointPort.setDescription("The from end point port index on the 'from card' of this connection.")
sniConnToEndPointCard = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnToEndPointCard.setDescription("The to end point access card index of this connection.")
sniConnToEndPointPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(101, 116))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnToEndPointPort.setDescription("The to end point port index on the 'to card' of this connection.")
sniConnToServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnToServiceId.setDescription("The to end point port service ID of this connection.")
sniConnToLookOutTapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sniConnToLookOutTapPort.setDescription("The to end point 'look out' tap port index on the 'from card' of this connection.")
sniConnToLookInTapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sniConnToLookInTapPort.setDescription("The to end point 'look in' tap port index on the 'to card' of this connection.")
sniConnFromEndPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnFromEndPointAlias.setDescription("The from end point alias of this connection.")
sniConnToEndPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnToEndPointAlias.setDescription("The to end point alias of this connection.")
sniConnFromEndPointAid = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnFromEndPointAid.setDescription("The from end point aid of this connection.")
sniConnToEndPointAid = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnToEndPointAid.setDescription("The to end point aid of this connection.")
sniConnCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sniConnCircuitId.setDescription("An optional descriptive name for this connection's circuit ID.")
sniConnAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnAdministrativeState.setDescription("The administrative state of this connection.")
sniConnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnOperationalState.setDescription("The operational state of this connection.")
sniConnAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(40,1024,16392,16520,16,16396,8224,256,2088,16420,2184,4120,4,2092,2064,4105,2060,16384,264,8236,8201,2176,8204,8240,8200,520,8192,4108,4104,8248,16512,1,56,16400,4152,16416,36,2072,8232,2080,16408,12,4128,4112,4232,8,4096,16432,4144,8202,48,2058,32,8328,2104,10,2,44,1032,1544,24,512,1033,8208,4106,2056,8320,2084,2048,4140,8216,2096,16394,16424,128,16428,0,2057,1025,136,8228,4132,4224,16393,4136,9,16440,)).subtype(namedValues=NamedValues(("normal", 0), ("not-installed", 1), ("mismatch-dependency", 10), ("unassigned", 1024), ("not-installed-unassigned", 1025), ("dependency-unassigned", 1032), ("not-installed-dependency-unassigned", 1033), ("failed-dependency", 12), ("self-healing", 128), ("dependency-self-healing", 136), ("dependency-idle-unassigned", 1544), ("degraded", 16), ("swap-pending", 16384), ("dependency-swap-pending", 16392), ("not-installed-dependency-swap-pending", 16393), ("mismatch-dependency-swap-pending", 16394), ("failed-dependency-swap-pending", 16396), ("degraded-swap-pending", 16400), ("dependency-degraded-swap-pending", 16408), ("temperature-swap-pending", 16416), ("failed-temperature-swap-pending", 16420), ("dependency-temperature-swap-pending", 16424), ("failed-dependency-temperature-swap-pending", 16428), ("degraded-temperature-swap-pending", 16432), ("dependency-degraded-temperature-swap-pending", 16440), ("self-healing-swap-pending", 16512), ("dependency-self-healing-swap-pending", 16520), ("mismatch", 2), ("tapped-look-out", 2048), ("dependency-tapped-look-out", 2056), ("not-installed-dependency-tapped-look-out", 2057), ("mismatch-dependency-tapped-look-out", 2058), ("failed-dependency-tapped-look-out", 2060), ("degraded-tapped-look-out", 2064), ("dependency-degraded-tapped-look-out", 2072), ("temperature-tapped-look-out", 2080), ("failed-temperature-tapped-look-out", 2084), ("dependency-temperature-tapped-look-out", 2088), ("failed-dependency-temperature-tapped-look-out", 2092), ("degraded-temperature-tapped-look-out", 2096), ("dependency-degraded-temperature-tapped-look-out", 2104), ("self-healing-tapped-look-out", 2176), ("dependency-self-healing-tapped-look-out", 2184), ("dependency-degraded", 24), ("busy", 256), ("dependency-busy", 264), ("temperature", 32), ("failed-temperature", 36), ("failed", 4), ("dependency-temperature", 40), ("tapped-look-in", 4096), ("dependency-tapped-look-in", 4104), ("not-installed-dependency-tapped-look-in", 4105), ("mismatch-dependency-tapped-look-in", 4106), ("failed-dependency-tapped-look-in", 4108), ("degraded-tapped-look-in", 4112), ("dependency-degraded-tapped-look-in", 4120), ("temperature-tapped-look-in", 4128), ("failed-temperature-tapped-look-in", 4132), ("dependency-temperature-tapped-look-in", 4136), ("failed-dependency-temperature-tapped-look-in", 4140), ("degraded-temperature-tapped-look-in", 4144), ("dependency-degraded-temperature-tapped-look-in", 4152), ("self-healing-tapped-look-in", 4224), ("dependency-self-healing-tapped-look-in", 4232), ("failed-dependency-temperature", 44), ("degraded-temperature", 48), ("idle", 512), ("dependency-idle", 520), ("dependency-degraded-temperature", 56), ("dependency", 8), ("tapped-both", 8192), ("dependency-tapped-both", 8200), ("not-installed-dependency-tapped-both", 8201), ("mismatch-dependency-tapped-both", 8202), ("failed-dependency-tapped-both", 8204), ("degraded-tapped-both", 8208), ("dependency-degraded-tapped-both", 8216), ("temperature-tapped-both", 8224), ("failed-temperature-tapped-both", 8228), ("dependency-temperature-tapped-both", 8232), ("failed-dependency-temperature-tapped-both", 8236), ("degraded-temperature-tapped-both", 8240), ("dependency-degraded-temperature-tapped-both", 8248), ("self-healing-tapped-both", 8320), ("dependency-self-healing-tapped-both", 8328), ("not-installed-dependency", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniConnAvailabilityStatus.setDescription("The availability status of this connection.")
sniConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 1, 1, 16), RowStatus().clone('createAndGo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sniConnRowStatus.setDescription("The status of this conceptual row.")
sniTransferServerTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 2))
if mibBuilder.loadTexts: sniTransferServerTable.setDescription("Simpler Networks Inc table to view / set transfer servers.")
sniTransferServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 2, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniTransferServerIndex"))
if mibBuilder.loadTexts: sniTransferServerEntry.setDescription("Simpler Networks Inc table entry to view / set transfer servers.")
sniTransferServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("backupRestore", 1), ("software", 2), ("logs", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTransferServerIndex.setDescription("There are 3 different servers that are defined based on the type\nof transfers that the system supports. The indexes are predetermined.")
sniTransferServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniTransferServerAddr.setDescription("The IP address of the file transfer server.")
sniTransferServerUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniTransferServerUserId.setDescription("A valid user name predefined on the specified server.")
sniTransferServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniTransferServerPassword.setDescription("The specified user's password on the specified server.")
sniTransferServerFile = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniTransferServerFile.setDescription("The path and file to manipulate on / from the specifed server.")
sniTransferServerDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("to", 1), ("from", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniTransferServerDirection.setDescription("The direction of the file transfer. The default is to.\n\nFor backup and restore we need both direction. For software\nonly the from direction and for logs only the to direction.")
sniTransferServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(6,2,3,4,5,1,)).subtype(namedValues=NamedValues(("queued", 1), ("transmitting", 2), ("completed", 3), ("failed", 4), ("transmit", 5), ("reset", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniTransferServerState.setDescription("This is the state of the requested file transfer. The initiator\nwill have to poll to monitor the progress of the file transfer.\n\n(1) queued - The request has been accepted and queued. Waiting\nto be processed - Read only\n(2) transmitting - The request has been taken from the queue\nand being processed - Read only\n(3) completed - The file has be successfully transmitted - Read only\n(4) failed - The file transfer has failed - Read only\n(5) transmit - Starts the processing of the request - Write only\n(6) reset - Resets the values to their default - Write only")
sniCableSwapTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 3))
if mibBuilder.loadTexts: sniCableSwapTable.setDescription("Simpler Networks Inc table to swap a group of create cross connections.")
sniCableSwapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 3, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniCableSwapTableIndex"))
if mibBuilder.loadTexts: sniCableSwapEntry.setDescription("Simpler Networks Inc table entry swap a group of cross connections.")
sniCableSwapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCableSwapTableIndex.setDescription("The index of this table.")
sniCableSwapFromBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniCableSwapFromBundleID.setDescription("The from-bundle of ports ID.")
sniCableSwapToBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniCableSwapToBundleID.setDescription("The to-bundle of ports ID.")
sniCableSwapTableState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(5,6,2,11,3,10,7,9,0,1,4,8,)).subtype(namedValues=NamedValues(("none", 0), ("prepare", 1), ("error-para", 10), ("error-func", 11), ("prepared", 2), ("simulate", 3), ("simulated", 4), ("complete", 5), ("completed", 6), ("cancel", 7), ("cancelled", 8), ("reset", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniCableSwapTableState.setDescription("The state of this cable swap command.")
clock = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 1, 8))
sniNtpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniNtpServerAddr.setDescription("The IP address of the NTP server.")
sniDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniDateTime.setDescription("The number of seconds since epoch (1970-01-01).")
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 1, 11))
sniTrapLogLastEntry = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTrapLogLastEntry.setDescription("The index of the last log entry.")
sniTrapLogMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTrapLogMaxEntries.setDescription("The maximum number of entries in the trap log.")
sniTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 11, 3))
if mibBuilder.loadTexts: sniTrapLogTable.setDescription("Simpler Networks Inc table to view sent events and alarms.")
sniTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 11, 3, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniTrapLogIndex"))
if mibBuilder.loadTexts: sniTrapLogEntry.setDescription("Simpler Networks Inc table entry of a sent event or alarm.")
sniTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTrapLogIndex.setDescription("Internal trap index of sent notification.")
sniTrapLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTrapLogTimeStamp.setDescription("Time value when the trap was generated.")
sniTrapLogOid = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTrapLogOid.setDescription("Trap's OID")
sniTrapLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,7,6,1,2,5,)).subtype(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("critical", 3), ("major", 4), ("minor", 5), ("warning", 6), ("informational", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTrapLogSeverity.setDescription("The trap's severity level.")
sniTrapLogTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("alarm", 1), ("event", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTrapLogTrapType.setDescription("The trap's type.")
sniTrapLogServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 3, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("sa", 1), ("nsa", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTrapLogServiceAffecting.setDescription("Indentifies whether the trap is service affecting or not.\n\n(1) sa - service affecting condition.\n(2) nsa - non-service affecting condition.")
sniTrapLogTrapInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTrapLogTrapInfo.setDescription("Dynamic free form text describing the trap.")
sniActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 11, 4))
if mibBuilder.loadTexts: sniActiveAlarmTable.setDescription("Simpler Networks Inc table to view active alarms.")
sniActiveAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 11, 4, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniActiveAlarmIndex"))
if mibBuilder.loadTexts: sniActiveAlarmEntry.setDescription("Simpler Networks Inc table entry of an active alarm.")
sniActiveAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniActiveAlarmIndex.setDescription("Internal index of the sent alarm.")
sniActiveAlarmTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniActiveAlarmTimeStamp.setDescription("Time value when the alarm was generated.")
sniActiveAlarmOid = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniActiveAlarmOid.setDescription("The alarm's OID")
sniActiveAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,7,6,1,2,5,)).subtype(namedValues=NamedValues(("cleared", 1), ("indeterminate", 2), ("critical", 3), ("major", 4), ("minor", 5), ("warning", 6), ("informational", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniActiveAlarmSeverity.setDescription("The alarm's severity level.")
sniActiveAlarmServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("sa", 1), ("nsa", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniActiveAlarmServiceAffecting.setDescription("Indentifies whether the alarm is service affecting or not.\n\n(1) sa - service affecting condition.\n(2) nsa - non-service affecting condition.")
sniActiveAlarmTrapInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniActiveAlarmTrapInfo.setDescription("Dynamic free form text describing the alarm.")
sniTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 11, 5))
if mibBuilder.loadTexts: sniTrapDestTable.setDescription("Simpler Networks Inc table to view / create trap destinations.")
sniTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 11, 5, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniTrapDestAddr"), (0, "SIMPLER-NETWORKS-MIB", "sniTrapDestUser"))
if mibBuilder.loadTexts: sniTrapDestEntry.setDescription("Simpler Networks Inc table entry of a trap destination to view / create.")
sniTrapDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTrapDestAddr.setDescription("SNMP trap destination address of the server listening for traps.")
sniTrapDestUser = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTrapDestUser.setDescription("The user the trap is sent on behalf of.")
sniTrapDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 11, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sniTrapDestRowStatus.setDescription("The status of this conceptual row.")
entity = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 1, 47))
sniEntitySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1))
sniEntityRedbootVersion = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityRedbootVersion.setDescription("The Redboot version")
sniEntitySysImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntitySysImageVersion.setDescription("The System image version")
sniEntitySystemSid = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntitySystemSid.setDescription("The system's identification group.")
sniEntitySystemAid = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntitySystemAid.setDescription("The system's AID.")
sniEntitySystemAdministrativeState = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntitySystemAdministrativeState.setDescription("The system's current administrative state.")
sniEntitySystemOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntitySystemOperationalState.setDescription("The system's current operational state.")
sniEntitySystemAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(40,48,2048,1024,520,8192,16,256,32,1,0,4,56,128,36,2,44,264,1025,136,1032,10,12,1544,24,8,512,1033,9,4096,)).subtype(namedValues=NamedValues(("normal", 0), ("not-installed", 1), ("mismatch-dependency", 10), ("unassigned", 1024), ("not-installed-unassigned", 1025), ("dependency-unassigned", 1032), ("not-installed-dependency-unassigned", 1033), ("failed-dependency", 12), ("self-healing", 128), ("dependency-self-healing", 136), ("dependency-idle-unassigned", 1544), ("degraded", 16), ("mismatch", 2), ("tapped-look-out", 2048), ("dependency-degraded", 24), ("busy", 256), ("dependency-busy", 264), ("temperature", 32), ("failed-temperature", 36), ("failed", 4), ("dependency-temperature", 40), ("tapped-look-in", 4096), ("failed-dependency-temperature", 44), ("degraded-temperature", 48), ("idle", 512), ("dependency-idle", 520), ("dependency-degraded-temperature", 56), ("dependency", 8), ("tapped-both", 8192), ("not-installed-dependency", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntitySystemAvailabilityStatus.setDescription("The system's current availability status.")
sniEntitySystemBundleSize = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntitySystemBundleSize.setDescription("The system bundle size.")
sniEntitySystemSubPortCapacity = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntitySystemSubPortCapacity.setDescription("The number of possible ports on the subscriber side.")
sniEntitySystemOePortCapacity = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntitySystemOePortCapacity.setDescription("The number of possible ports on the oe side.")
sniEntitySystemConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntitySystemConfiguration.setDescription("The system configuration")
sniEntityPendingCommands = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 47, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityPendingCommands.setDescription("The number of pending commands.")
sniEntityShelfTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 47, 2))
if mibBuilder.loadTexts: sniEntityShelfTable.setDescription("Simpler Networks Inc table to view shelf entities.")
sniEntityShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 47, 2, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniEntityShelfIndex"))
if mibBuilder.loadTexts: sniEntityShelfEntry.setDescription("Simpler Networks Inc table entry of a shelf entity to view.")
sniEntityShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityShelfIndex.setDescription("The shelf's index.")
sniEntityShelfAid = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityShelfAid.setDescription("The shelf's AID.")
sniEntityShelfAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityShelfAdministrativeState.setDescription("The shelf's current administrative state.")
sniEntityShelfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityShelfOperationalState.setDescription("The shelf's current operational state.")
sniEntityShelfAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(40,48,2048,1024,520,8192,16,256,32,1,0,4,56,128,36,2,44,264,1025,136,1032,10,12,1544,24,8,512,1033,9,4096,)).subtype(namedValues=NamedValues(("normal", 0), ("not-installed", 1), ("mismatch-dependency", 10), ("unassigned", 1024), ("not-installed-unassigned", 1025), ("dependency-unassigned", 1032), ("not-installed-dependency-unassigned", 1033), ("failed-dependency", 12), ("self-healing", 128), ("dependency-self-healing", 136), ("dependency-idle-unassigned", 1544), ("degraded", 16), ("mismatch", 2), ("tapped-look-out", 2048), ("dependency-degraded", 24), ("busy", 256), ("dependency-busy", 264), ("temperature", 32), ("failed-temperature", 36), ("failed", 4), ("dependency-temperature", 40), ("tapped-look-in", 4096), ("failed-dependency-temperature", 44), ("degraded-temperature", 48), ("idle", 512), ("dependency-idle", 520), ("dependency-degraded-temperature", 56), ("dependency", 8), ("tapped-both", 8192), ("not-installed-dependency", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityShelfAvailabilityStatus.setDescription("The shelf's current availability status.")
sniEntityShelfClei = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityShelfClei.setDescription("The shelf's CLEI code.")
sniEntityShelfHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityShelfHardwareRev.setDescription("The shelf's hardware revision number.")
sniEntityShelfSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityShelfSerialNum.setDescription("The shelf's serial number.")
sniEntityCardTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3))
if mibBuilder.loadTexts: sniEntityCardTable.setDescription("Simpler Networks Inc table to view card entities.")
sniEntityCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniEntityCardShelfIndex"), (0, "SIMPLER-NETWORKS-MIB", "sniEntityCardIndex"), (0, "SIMPLER-NETWORKS-MIB", "sniEntityCardType"))
if mibBuilder.loadTexts: sniEntityCardEntry.setDescription("Simpler Networks Inc table entry of a card entity to view.")
sniEntityCardShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityCardShelfIndex.setDescription("The card's shelf index.")
sniEntityCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityCardIndex.setDescription("The card index.")
sniEntityCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,4,3,2,)).subtype(namedValues=NamedValues(("control", 1), ("psu", 2), ("overflow", 3), ("commtestaccess", 4), ("funnelcard", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityCardType.setDescription("The card's type.")
sniEntityCardAid = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityCardAid.setDescription("The card's AID.")
sniEntityCardAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ("shutdown", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityCardAdministrativeState.setDescription("The card's current administrative state.")
sniEntityCardOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityCardOperationalState.setDescription("The card's current operational state.")
sniEntityCardAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(40,48,2048,1024,520,8192,16,256,32,1,0,4,56,128,36,2,44,264,1025,136,1032,10,12,1544,24,8,512,1033,9,4096,)).subtype(namedValues=NamedValues(("normal", 0), ("not-installed", 1), ("mismatch-dependency", 10), ("unassigned", 1024), ("not-installed-unassigned", 1025), ("dependency-unassigned", 1032), ("not-installed-dependency-unassigned", 1033), ("failed-dependency", 12), ("self-healing", 128), ("dependency-self-healing", 136), ("dependency-idle-unassigned", 1544), ("degraded", 16), ("mismatch", 2), ("tapped-look-out", 2048), ("dependency-degraded", 24), ("busy", 256), ("dependency-busy", 264), ("temperature", 32), ("failed-temperature", 36), ("failed", 4), ("dependency-temperature", 40), ("tapped-look-in", 4096), ("failed-dependency-temperature", 44), ("degraded-temperature", 48), ("idle", 512), ("dependency-idle", 520), ("dependency-degraded-temperature", 56), ("dependency", 8), ("tapped-both", 8192), ("not-installed-dependency", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityCardAvailabilityStatus.setDescription("The card's current availability status.")
sniEntityCardClei = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityCardClei.setDescription("The card's CLEI code.")
sniEntityCardHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityCardHardwareRev.setDescription("The card's hardware revision number.")
sniEntityCardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityCardSerialNum.setDescription("The card's serial number.")
sniEntityCardProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 3, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,0,)).subtype(namedValues=NamedValues(("undefined", 0), ("notProtected", 1), ("protected", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityCardProtection.setDescription("The card's protection type.")
sniEntityPortTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 47, 4))
if mibBuilder.loadTexts: sniEntityPortTable.setDescription("Simpler Networks Inc table to view / update port entities.")
sniEntityPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 47, 4, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniEntityPortCardIndex"), (0, "SIMPLER-NETWORKS-MIB", "sniEntityPortIndex"))
if mibBuilder.loadTexts: sniEntityPortEntry.setDescription("Simpler Networks Inc table entry of a port entity to view / update.")
sniEntityPortCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityPortCardIndex.setDescription("The card index where the port index physically resides.")
sniEntityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 116))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityPortIndex.setDescription("The port's index.")
sniEntityPortAid = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityPortAid.setDescription("The port's AID.")
sniEntityPortAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityPortAdministrativeState.setDescription("The port's current administrative state.")
sniEntityPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityPortOperationalState.setDescription("The port's current operational state.")
sniEntityPortAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 4, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(40,48,2048,1024,520,8192,16,256,32,1,0,4,56,128,36,2,44,264,1025,136,1032,10,12,1544,24,8,512,1033,9,4096,)).subtype(namedValues=NamedValues(("normal", 0), ("not-installed", 1), ("mismatch-dependency", 10), ("unassigned", 1024), ("not-installed-unassigned", 1025), ("dependency-unassigned", 1032), ("not-installed-dependency-unassigned", 1033), ("failed-dependency", 12), ("self-healing", 128), ("dependency-self-healing", 136), ("dependency-idle-unassigned", 1544), ("degraded", 16), ("mismatch", 2), ("tapped-look-out", 2048), ("dependency-degraded", 24), ("busy", 256), ("dependency-busy", 264), ("temperature", 32), ("failed-temperature", 36), ("failed", 4), ("dependency-temperature", 40), ("tapped-look-in", 4096), ("failed-dependency-temperature", 44), ("degraded-temperature", 48), ("idle", 512), ("dependency-idle", 520), ("dependency-degraded-temperature", 56), ("dependency", 8), ("tapped-both", 8192), ("not-installed-dependency", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityPortAvailabilityStatus.setDescription("The port's current availability status.")
sniEntityPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityPortAlias.setDescription("The port's alias name.")
sniEntityPortServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityPortServiceId.setDescription("The port's service ID.")
sniEntityServiceTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5))
if mibBuilder.loadTexts: sniEntityServiceTable.setDescription("Simpler Networks Inc table to view / update service entities.")
sniEntityServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniEntityServiceId"))
if mibBuilder.loadTexts: sniEntityServiceEntry.setDescription("Simpler Networks Inc table entry of a service entity to view / update.")
sniEntityServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityServiceId.setDescription("The service Id.")
sniEntityServiceAid = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityServiceAid.setDescription("The service unique index -Aid.")
sniEntityServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityServiceName.setDescription("The service name - like POTS or ISDN.")
sniEntityServiceSysCr = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityServiceSysCr.setDescription("The threshold to arise critical alarm for system.")
sniEntityServiceSysMaj = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityServiceSysMaj.setDescription("The threshold to arise major alarm for system.")
sniEntityServiceSysMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityServiceSysMin.setDescription("The threshold to arise minor alarm for system.")
sniEntityServiceCardCr = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityServiceCardCr.setDescription("The threshold to arise critical alarm for funnel card.")
sniEntityServiceCardMaj = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityServiceCardMaj.setDescription("The threshold to arise major alarm for funnel card.")
sniEntityServiceCardMin = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityServiceCardMin.setDescription("The threshold to arise minor alarm for funnel card.")
sniEntityServicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityServicePriority.setDescription("The service's priortiy that is low to allow connection go throgh the overflow card.")
sniEntityServiceDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityServiceDefault.setDescription("The service default state.")
sniEntityServiceReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniEntityServiceReadOnly.setDescription("The service read/write status.")
sniEntityTapTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 47, 6))
if mibBuilder.loadTexts: sniEntityTapTable.setDescription("Simpler Networks Inc table to view / update tap entities.")
sniEntityTapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 47, 6, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniEntityTapCardIndex"), (0, "SIMPLER-NETWORKS-MIB", "sniEntityTapIndex"))
if mibBuilder.loadTexts: sniEntityTapEntry.setDescription("Simpler Networks Inc table entry of a tap entity to view / update.")
sniEntityTapCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapCardIndex.setDescription("The card index where the tap index physically resides.")
sniEntityTapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapIndex.setDescription("The tap's index.")
sniEntityTapAid = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapAid.setDescription("The tap's AID.")
sniEntityTapAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 6, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapAdministrativeState.setDescription("The tap's current administrative state.")
sniEntityTapOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 6, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapOperationalState.setDescription("The tap's current operational state.")
sniEntityTapAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 6, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(128,36,40,2,8200,44,56,2048,1024,264,520,8192,16,48,136,1025,1032,10,12,256,2056,32,1,1544,0,24,4,512,1033,4104,9,8,4096,)).subtype(namedValues=NamedValues(("normal", 0), ("not-installed", 1), ("mismatch-dependency", 10), ("unassigned", 1024), ("not-installed-unassigned", 1025), ("dependency-unassigned", 1032), ("not-installed-dependency-unassigned", 1033), ("failed-dependency", 12), ("self-healing", 128), ("dependency-self-healing", 136), ("dependency-idle-unassigned", 1544), ("degraded", 16), ("mismatch", 2), ("tapped-look-out", 2048), ("tapped-look-out-dependency", 2056), ("dependency-degraded", 24), ("busy", 256), ("dependency-busy", 264), ("temperature", 32), ("failed-temperature", 36), ("failed", 4), ("dependency-temperature", 40), ("tapped-look-in", 4096), ("tapped-look-in-dependency", 4104), ("failed-dependency-temperature", 44), ("degraded-temperature", 48), ("idle", 512), ("dependency-idle", 520), ("dependency-degraded-temperature", 56), ("dependency", 8), ("tapped-both", 8192), ("tapped-both-dependency", 8200), ("not-installed-dependency", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapAvailabilityStatus.setDescription("The tap's current availability status.")
sniEntityTapConnTable = MibTable((1, 3, 6, 1, 4, 1, 4987, 1, 47, 7))
if mibBuilder.loadTexts: sniEntityTapConnTable.setDescription("Simpler Networks Inc table to view / update tap entities.")
sniEntityTapConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4987, 1, 47, 7, 1)).setIndexNames((0, "SIMPLER-NETWORKS-MIB", "sniEntityTapConnToOSCard"), (0, "SIMPLER-NETWORKS-MIB", "sniEntityTapConnToTap"))
if mibBuilder.loadTexts: sniEntityTapConnEntry.setDescription("Simpler Networks Inc table entry of a tap connection entity to view / update.")
sniEntityTapConnFromCard = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapConnFromCard.setDescription("The 'from' card index of tap connection.")
sniEntityTapConnFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 116))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapConnFromPort.setDescription("The 'from' pair index of tap connection ")
sniEntityTapConnToOSCard = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapConnToOSCard.setDescription("The 'to' card index of tap connection")
sniEntityTapConnToTap = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapConnToTap.setDescription("The 'to' tap index of tap connection")
sniEntityTapConnSide = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 7, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,0,)).subtype(namedValues=NamedValues(("undefined", 0), ("sub", 1), ("oe", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapConnSide.setDescription("The side info of tap connection")
sniEntityTapConnAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 7, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,0,)).subtype(namedValues=NamedValues(("invalid", 0), ("unlocked", 1), ("locked", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapConnAdministrativeState.setDescription("The current administrative state of tap connection.")
sniEntityTapConnOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 7, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,0,)).subtype(namedValues=NamedValues(("invalid", 0), ("enabled", 1), ("disabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapConnOperationalState.setDescription("The current operational state of tap connection")
sniEntityTapConnAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4987, 1, 47, 7, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(40,48,1024,520,16,256,32,1,0,4,56,128,36,2,44,264,1025,136,1032,10,12,1544,24,8,512,1033,9,)).subtype(namedValues=NamedValues(("normal", 0), ("not-installed", 1), ("mismatch-dependency", 10), ("unassigned", 1024), ("not-installed-unassigned", 1025), ("dependency-unassigned", 1032), ("not-installed-dependency-unassigned", 1033), ("failed-dependency", 12), ("self-healing", 128), ("dependency-self-healing", 136), ("dependency-idle-unassigned", 1544), ("degraded", 16), ("mismatch", 2), ("dependency-degraded", 24), ("busy", 256), ("dependency-busy", 264), ("temperature", 32), ("failed-temperature", 36), ("failed", 4), ("dependency-temperature", 40), ("failed-dependency-temperature", 44), ("degraded-temperature", 48), ("idle", 512), ("dependency-idle", 520), ("dependency-degraded-temperature", 56), ("dependency", 8), ("not-installed-dependency", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEntityTapConnAvailabilityStatus.setDescription("The current availability status of tap connection.")
spinlock = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 1, 50))
sniSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 4987, 1, 50, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sniSpinLock.setDescription("An advisory lock used to allow several cooperating\nCommand Generator Applications to coordinate their\nuse of facilities to alter data in the ezedge database.")
sniTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2))
sniConfigurationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 1))
sniConfigurationTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0))
sniEntityStateChangeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 2))
sniEntityStateChangeTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 2, 0))
sniSecuriyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 3))
sniSecuriyTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 3, 0))
sniProvisioningTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 5))
sniProvisioningTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 5, 0))
sniBootTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 6))
sniBootTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 6, 0))
sniAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 28))
sniAlarmTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0))
sniCommandStatusTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 48))
sniCommandStatusTrapsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4987, 2, 48, 0))

# Augmentions

# Notifications

sniSoftwareUpgradeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 1)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSoftwareUpgradeTrap.setDescription("A software upgrade has been initiated.")
sniSystemContactModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 2)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSystemContactModifiedTrap.setDescription("The system contact has been modified.")
sniSystemNameModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 3)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSystemNameModifiedTrap.setDescription("The system name has been modified.")
sniSystemLocationModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 4)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSystemLocationModifiedTrap.setDescription("The system location has been modified.")
sniSystemIDModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 5)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSystemIDModifiedTrap.setDescription("The system ID has been modified.")
sniSystemConfigurationModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 6)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSystemConfigurationModifiedTrap.setDescription("The system configuration has been modified.")
sniTrapTargetAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 7)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniTrapTargetAddedTrap.setDescription("A trap target has been added.")
sniTrapTargetModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 8)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniTrapTargetModifiedTrap.setDescription("A trap target has been modified.")
sniTrapTargetDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 9)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniTrapTargetDeletedTrap.setDescription("A trap target has been deleted.")
sniSystemIpModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 10)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSystemIpModifiedTrap.setDescription("The system IP address has been modified.")
sniNtpServerModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 11)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniNtpServerModifiedTrap.setDescription("The NTP server address has been modified.")
sniDateAndTimeModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 12)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniDateAndTimeModifiedTrap.setDescription("The system date and time has been modified.")
sniDatabaseRestoredTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 13)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniDatabaseRestoredTrap.setDescription("A database has been restored.")
sniNewSoftwareInstalledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 1, 0, 14)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniNewSoftwareInstalledTrap.setDescription("A new software load has been installed.")
sniEntityStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 2, 0, 1)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityStateChangeTrap.setDescription("A state change occured on an entity.")
sniLciLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 3, 0, 1)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniLciLoginTrap.setDescription("A user has logged in on the local craft port.")
sniLciLogoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 3, 0, 2)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniLciLogoutTrap.setDescription("A user has logged out from the local craft port.")
sniLciFailedLoginAttemptTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 3, 0, 3)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniLciFailedLoginAttemptTrap.setDescription("Local Craft Interface failed login attempt.")
sniLciIntrusionAttemptTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 3, 0, 4)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniLciIntrusionAttemptTrap.setDescription("Local Craft Interface intrusion attempt.")
sniLCIUserAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 3, 0, 5)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniLCIUserAddedTrap.setDescription("A LCI user was added.")
sniLCIUserModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 3, 0, 6)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniLCIUserModifiedTrap.setDescription("A LCI user was modified.")
sniLCIUserDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 3, 0, 7)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniLCIUserDeletedTrap.setDescription("A LCI user was deleted.")
sniSnmpUsmUserAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 3, 0, 8)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSnmpUsmUserAddedTrap.setDescription("An SNMP USM user was added.")
sniSnmpUsmUserModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 3, 0, 9)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSnmpUsmUserModifiedTrap.setDescription("An SNMP USM user was modified.")
sniSnmpUsmUserDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 3, 0, 10)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSnmpUsmUserDeletedTrap.setDescription("An SNMP USM user was deleted.")
sniConnectionAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 5, 0, 1)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniConnectionAddedTrap.setDescription("A connection was added.")
sniConnectionDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 5, 0, 2)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniConnectionDeletedTrap.setDescription("A connection was deleted.")
sniConnectionModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 5, 0, 3)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniConnectionModifiedTrap.setDescription("A connection was modified.")
sniPortModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 5, 0, 4)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniPortModifiedTrap.setDescription("A port was modified.")
sniEquipmentInsertedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 5, 0, 5)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEquipmentInsertedTrap.setDescription("A card was inserted.")
sniEquipmentRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 5, 0, 6)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEquipmentRemovedTrap.setDescription("A card was removed.")
sniCreateTapTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 5, 0, 7)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniCreateTapTrap.setDescription("Create a tap.")
sniDeleteTapTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 5, 0, 8)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniDeleteTapTrap.setDescription("Delete a tap.")
sniDefineServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 5, 0, 9)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniDefineServiceTrap.setDescription("Define one service.")
sniSwapCableTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 5, 0, 10)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSwapCableTrap.setDescription("Swap two bundle cables.")
sniSysRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 6, 0, 1)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSysRebootTrap.setDescription("The street cabinet is in its initialization phase.")
sniEntityFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 1)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityFailedTrap.setDescription("The system has detected that an entity has been failed.")
sniEntityDegradedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 2)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityDegradedTrap.setDescription("The system has detected that an entity has been degraded.")
sniEntityMissingTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 3)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityMissingTrap.setDescription("The system has detected that an entity is missing.")
sniEntityMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 4)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityMismatchTrap.setDescription("The system has detected that an entity is mismatched.")
sniEntitySeverlyHighTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 5)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntitySeverlyHighTempTrap.setDescription("An entity has detected that its severly high temperature threshold has been passed.")
sniEntityHighTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 6)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityHighTempTrap.setDescription("An entity has detected that its high temperature threshold has been passed.")
sniEntitySeverlyLowTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 7)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntitySeverlyLowTempTrap.setDescription("An entity has detected that its severly low temperature threshold has been passed.")
sniEntityLowTempTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 8)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityLowTempTrap.setDescription("An entity has detected that its low temperature threshold has been passed.")
sniEntityHighBlockingRatioTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 9)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityHighBlockingRatioTrap.setDescription("An entity has detected that its blocking ratio is high.")
sniEntityMediumBlockingRatioTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 10)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityMediumBlockingRatioTrap.setDescription("An entity has detected that its blocking ratio is medium.")
sniEntityDbFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 11)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityDbFailureTrap.setDescription("The database has failed.")
sniEntityDbMissingTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 12)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityDbMissingTrap.setDescription("Database missing.")
sniEntityDbMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 13)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityDbMismatchTrap.setDescription("Database mismatched.")
sniConnectionLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 14)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniConnectionLostTrap.setDescription("A connection was lost.")
sniNtpUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 15)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniNtpUnreachableTrap.setDescription("The defined NTP server is not reachable.")
sniSystemTimeNotSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 16)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniSystemTimeNotSetTrap.setDescription("The system time is not set.")
sniEntityCardServiceMinorTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 17)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityCardServiceMinorTrap.setDescription("A Funnel card has detected that usage of service reaches minor level.")
sniEntityCardServiceMajorTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 18)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityCardServiceMajorTrap.setDescription("A Funnel card has detected that usage of service reaches major level.")
sniEntityCardServiceCriticalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 19)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityCardServiceCriticalTrap.setDescription("A Funnel card has detected that usage of service reaches critical level.")
sniEntityConnectionTappedMajorTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 20)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityConnectionTappedMajorTrap.setDescription("Connection is being tapped.")
sniEntityConnectionPendingSwapTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 28, 0, 21)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniEntityConnectionPendingSwapTrap.setDescription("Connection is being swapped.")
sniCommandSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 48, 0, 1)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniCommandSuccessTrap.setDescription("An SNMP SET command succeeded.")
sniCommandFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4987, 2, 48, 0, 2)).setObjects(*(("SIMPLER-NETWORKS-MIB", "sniTrapLogSeverity"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapType"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogTrapInfo"), ("SIMPLER-NETWORKS-MIB", "sniTrapLogServiceAffecting"), ) )
if mibBuilder.loadTexts: sniCommandFailureTrap.setDescription("An SNMP SET command failed.")

# Exports

# Module identity
mibBuilder.exportSymbols("SIMPLER-NETWORKS-MIB", PYSNMP_MODULE_ID=sni)

# Objects
mibBuilder.exportSymbols("SIMPLER-NETWORKS-MIB", sni=sni, ezedge=ezedge, sniConnTable=sniConnTable, sniConnEntry=sniConnEntry, sniConnFromEndPointCard=sniConnFromEndPointCard, sniConnFromEndPointPort=sniConnFromEndPointPort, sniConnToEndPointCard=sniConnToEndPointCard, sniConnToEndPointPort=sniConnToEndPointPort, sniConnToServiceId=sniConnToServiceId, sniConnToLookOutTapPort=sniConnToLookOutTapPort, sniConnToLookInTapPort=sniConnToLookInTapPort, sniConnFromEndPointAlias=sniConnFromEndPointAlias, sniConnToEndPointAlias=sniConnToEndPointAlias, sniConnFromEndPointAid=sniConnFromEndPointAid, sniConnToEndPointAid=sniConnToEndPointAid, sniConnCircuitId=sniConnCircuitId, sniConnAdministrativeState=sniConnAdministrativeState, sniConnOperationalState=sniConnOperationalState, sniConnAvailabilityStatus=sniConnAvailabilityStatus, sniConnRowStatus=sniConnRowStatus, sniTransferServerTable=sniTransferServerTable, sniTransferServerEntry=sniTransferServerEntry, sniTransferServerIndex=sniTransferServerIndex, sniTransferServerAddr=sniTransferServerAddr, sniTransferServerUserId=sniTransferServerUserId, sniTransferServerPassword=sniTransferServerPassword, sniTransferServerFile=sniTransferServerFile, sniTransferServerDirection=sniTransferServerDirection, sniTransferServerState=sniTransferServerState, sniCableSwapTable=sniCableSwapTable, sniCableSwapEntry=sniCableSwapEntry, sniCableSwapTableIndex=sniCableSwapTableIndex, sniCableSwapFromBundleID=sniCableSwapFromBundleID, sniCableSwapToBundleID=sniCableSwapToBundleID, sniCableSwapTableState=sniCableSwapTableState, clock=clock, sniNtpServerAddr=sniNtpServerAddr, sniDateTime=sniDateTime, notifications=notifications, sniTrapLogLastEntry=sniTrapLogLastEntry, sniTrapLogMaxEntries=sniTrapLogMaxEntries, sniTrapLogTable=sniTrapLogTable, sniTrapLogEntry=sniTrapLogEntry, sniTrapLogIndex=sniTrapLogIndex, sniTrapLogTimeStamp=sniTrapLogTimeStamp, sniTrapLogOid=sniTrapLogOid, sniTrapLogSeverity=sniTrapLogSeverity, sniTrapLogTrapType=sniTrapLogTrapType, sniTrapLogServiceAffecting=sniTrapLogServiceAffecting, sniTrapLogTrapInfo=sniTrapLogTrapInfo, sniActiveAlarmTable=sniActiveAlarmTable, sniActiveAlarmEntry=sniActiveAlarmEntry, sniActiveAlarmIndex=sniActiveAlarmIndex, sniActiveAlarmTimeStamp=sniActiveAlarmTimeStamp, sniActiveAlarmOid=sniActiveAlarmOid, sniActiveAlarmSeverity=sniActiveAlarmSeverity, sniActiveAlarmServiceAffecting=sniActiveAlarmServiceAffecting, sniActiveAlarmTrapInfo=sniActiveAlarmTrapInfo, sniTrapDestTable=sniTrapDestTable, sniTrapDestEntry=sniTrapDestEntry, sniTrapDestAddr=sniTrapDestAddr, sniTrapDestUser=sniTrapDestUser, sniTrapDestRowStatus=sniTrapDestRowStatus, entity=entity, sniEntitySystem=sniEntitySystem, sniEntityRedbootVersion=sniEntityRedbootVersion, sniEntitySysImageVersion=sniEntitySysImageVersion, sniEntitySystemSid=sniEntitySystemSid, sniEntitySystemAid=sniEntitySystemAid, sniEntitySystemAdministrativeState=sniEntitySystemAdministrativeState, sniEntitySystemOperationalState=sniEntitySystemOperationalState, sniEntitySystemAvailabilityStatus=sniEntitySystemAvailabilityStatus, sniEntitySystemBundleSize=sniEntitySystemBundleSize, sniEntitySystemSubPortCapacity=sniEntitySystemSubPortCapacity, sniEntitySystemOePortCapacity=sniEntitySystemOePortCapacity, sniEntitySystemConfiguration=sniEntitySystemConfiguration, sniEntityPendingCommands=sniEntityPendingCommands, sniEntityShelfTable=sniEntityShelfTable, sniEntityShelfEntry=sniEntityShelfEntry, sniEntityShelfIndex=sniEntityShelfIndex, sniEntityShelfAid=sniEntityShelfAid, sniEntityShelfAdministrativeState=sniEntityShelfAdministrativeState, sniEntityShelfOperationalState=sniEntityShelfOperationalState, sniEntityShelfAvailabilityStatus=sniEntityShelfAvailabilityStatus, sniEntityShelfClei=sniEntityShelfClei, sniEntityShelfHardwareRev=sniEntityShelfHardwareRev, sniEntityShelfSerialNum=sniEntityShelfSerialNum, sniEntityCardTable=sniEntityCardTable, sniEntityCardEntry=sniEntityCardEntry, sniEntityCardShelfIndex=sniEntityCardShelfIndex, sniEntityCardIndex=sniEntityCardIndex, sniEntityCardType=sniEntityCardType, sniEntityCardAid=sniEntityCardAid, sniEntityCardAdministrativeState=sniEntityCardAdministrativeState, sniEntityCardOperationalState=sniEntityCardOperationalState, sniEntityCardAvailabilityStatus=sniEntityCardAvailabilityStatus, sniEntityCardClei=sniEntityCardClei, sniEntityCardHardwareRev=sniEntityCardHardwareRev, sniEntityCardSerialNum=sniEntityCardSerialNum, sniEntityCardProtection=sniEntityCardProtection, sniEntityPortTable=sniEntityPortTable, sniEntityPortEntry=sniEntityPortEntry, sniEntityPortCardIndex=sniEntityPortCardIndex, sniEntityPortIndex=sniEntityPortIndex, sniEntityPortAid=sniEntityPortAid, sniEntityPortAdministrativeState=sniEntityPortAdministrativeState, sniEntityPortOperationalState=sniEntityPortOperationalState, sniEntityPortAvailabilityStatus=sniEntityPortAvailabilityStatus, sniEntityPortAlias=sniEntityPortAlias, sniEntityPortServiceId=sniEntityPortServiceId, sniEntityServiceTable=sniEntityServiceTable, sniEntityServiceEntry=sniEntityServiceEntry, sniEntityServiceId=sniEntityServiceId, sniEntityServiceAid=sniEntityServiceAid, sniEntityServiceName=sniEntityServiceName, sniEntityServiceSysCr=sniEntityServiceSysCr, sniEntityServiceSysMaj=sniEntityServiceSysMaj, sniEntityServiceSysMin=sniEntityServiceSysMin, sniEntityServiceCardCr=sniEntityServiceCardCr, sniEntityServiceCardMaj=sniEntityServiceCardMaj, sniEntityServiceCardMin=sniEntityServiceCardMin, sniEntityServicePriority=sniEntityServicePriority, sniEntityServiceDefault=sniEntityServiceDefault, sniEntityServiceReadOnly=sniEntityServiceReadOnly, sniEntityTapTable=sniEntityTapTable, sniEntityTapEntry=sniEntityTapEntry)
mibBuilder.exportSymbols("SIMPLER-NETWORKS-MIB", sniEntityTapCardIndex=sniEntityTapCardIndex, sniEntityTapIndex=sniEntityTapIndex, sniEntityTapAid=sniEntityTapAid, sniEntityTapAdministrativeState=sniEntityTapAdministrativeState, sniEntityTapOperationalState=sniEntityTapOperationalState, sniEntityTapAvailabilityStatus=sniEntityTapAvailabilityStatus, sniEntityTapConnTable=sniEntityTapConnTable, sniEntityTapConnEntry=sniEntityTapConnEntry, sniEntityTapConnFromCard=sniEntityTapConnFromCard, sniEntityTapConnFromPort=sniEntityTapConnFromPort, sniEntityTapConnToOSCard=sniEntityTapConnToOSCard, sniEntityTapConnToTap=sniEntityTapConnToTap, sniEntityTapConnSide=sniEntityTapConnSide, sniEntityTapConnAdministrativeState=sniEntityTapConnAdministrativeState, sniEntityTapConnOperationalState=sniEntityTapConnOperationalState, sniEntityTapConnAvailabilityStatus=sniEntityTapConnAvailabilityStatus, spinlock=spinlock, sniSpinLock=sniSpinLock, sniTraps=sniTraps, sniConfigurationTraps=sniConfigurationTraps, sniConfigurationTrapsGroup=sniConfigurationTrapsGroup, sniEntityStateChangeTraps=sniEntityStateChangeTraps, sniEntityStateChangeTrapsGroup=sniEntityStateChangeTrapsGroup, sniSecuriyTraps=sniSecuriyTraps, sniSecuriyTrapsGroup=sniSecuriyTrapsGroup, sniProvisioningTraps=sniProvisioningTraps, sniProvisioningTrapsGroup=sniProvisioningTrapsGroup, sniBootTraps=sniBootTraps, sniBootTrapsGroup=sniBootTrapsGroup, sniAlarmTraps=sniAlarmTraps, sniAlarmTrapsGroup=sniAlarmTrapsGroup, sniCommandStatusTraps=sniCommandStatusTraps, sniCommandStatusTrapsGroup=sniCommandStatusTrapsGroup)

# Notifications
mibBuilder.exportSymbols("SIMPLER-NETWORKS-MIB", sniSoftwareUpgradeTrap=sniSoftwareUpgradeTrap, sniSystemContactModifiedTrap=sniSystemContactModifiedTrap, sniSystemNameModifiedTrap=sniSystemNameModifiedTrap, sniSystemLocationModifiedTrap=sniSystemLocationModifiedTrap, sniSystemIDModifiedTrap=sniSystemIDModifiedTrap, sniSystemConfigurationModifiedTrap=sniSystemConfigurationModifiedTrap, sniTrapTargetAddedTrap=sniTrapTargetAddedTrap, sniTrapTargetModifiedTrap=sniTrapTargetModifiedTrap, sniTrapTargetDeletedTrap=sniTrapTargetDeletedTrap, sniSystemIpModifiedTrap=sniSystemIpModifiedTrap, sniNtpServerModifiedTrap=sniNtpServerModifiedTrap, sniDateAndTimeModifiedTrap=sniDateAndTimeModifiedTrap, sniDatabaseRestoredTrap=sniDatabaseRestoredTrap, sniNewSoftwareInstalledTrap=sniNewSoftwareInstalledTrap, sniEntityStateChangeTrap=sniEntityStateChangeTrap, sniLciLoginTrap=sniLciLoginTrap, sniLciLogoutTrap=sniLciLogoutTrap, sniLciFailedLoginAttemptTrap=sniLciFailedLoginAttemptTrap, sniLciIntrusionAttemptTrap=sniLciIntrusionAttemptTrap, sniLCIUserAddedTrap=sniLCIUserAddedTrap, sniLCIUserModifiedTrap=sniLCIUserModifiedTrap, sniLCIUserDeletedTrap=sniLCIUserDeletedTrap, sniSnmpUsmUserAddedTrap=sniSnmpUsmUserAddedTrap, sniSnmpUsmUserModifiedTrap=sniSnmpUsmUserModifiedTrap, sniSnmpUsmUserDeletedTrap=sniSnmpUsmUserDeletedTrap, sniConnectionAddedTrap=sniConnectionAddedTrap, sniConnectionDeletedTrap=sniConnectionDeletedTrap, sniConnectionModifiedTrap=sniConnectionModifiedTrap, sniPortModifiedTrap=sniPortModifiedTrap, sniEquipmentInsertedTrap=sniEquipmentInsertedTrap, sniEquipmentRemovedTrap=sniEquipmentRemovedTrap, sniCreateTapTrap=sniCreateTapTrap, sniDeleteTapTrap=sniDeleteTapTrap, sniDefineServiceTrap=sniDefineServiceTrap, sniSwapCableTrap=sniSwapCableTrap, sniSysRebootTrap=sniSysRebootTrap, sniEntityFailedTrap=sniEntityFailedTrap, sniEntityDegradedTrap=sniEntityDegradedTrap, sniEntityMissingTrap=sniEntityMissingTrap, sniEntityMismatchTrap=sniEntityMismatchTrap, sniEntitySeverlyHighTempTrap=sniEntitySeverlyHighTempTrap, sniEntityHighTempTrap=sniEntityHighTempTrap, sniEntitySeverlyLowTempTrap=sniEntitySeverlyLowTempTrap, sniEntityLowTempTrap=sniEntityLowTempTrap, sniEntityHighBlockingRatioTrap=sniEntityHighBlockingRatioTrap, sniEntityMediumBlockingRatioTrap=sniEntityMediumBlockingRatioTrap, sniEntityDbFailureTrap=sniEntityDbFailureTrap, sniEntityDbMissingTrap=sniEntityDbMissingTrap, sniEntityDbMismatchTrap=sniEntityDbMismatchTrap, sniConnectionLostTrap=sniConnectionLostTrap, sniNtpUnreachableTrap=sniNtpUnreachableTrap, sniSystemTimeNotSetTrap=sniSystemTimeNotSetTrap, sniEntityCardServiceMinorTrap=sniEntityCardServiceMinorTrap, sniEntityCardServiceMajorTrap=sniEntityCardServiceMajorTrap, sniEntityCardServiceCriticalTrap=sniEntityCardServiceCriticalTrap, sniEntityConnectionTappedMajorTrap=sniEntityConnectionTappedMajorTrap, sniEntityConnectionPendingSwapTrap=sniEntityConnectionPendingSwapTrap, sniCommandSuccessTrap=sniCommandSuccessTrap, sniCommandFailureTrap=sniCommandFailureTrap)

